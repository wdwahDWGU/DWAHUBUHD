local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()
local Options = Library.Options
local Toggles = Library.Toggles
Library.ShowToggleFrameInKeybinds = true
local Window = Library:CreateWindow({
	Title = "穷小子打工记",
	Footer = "版本:1.0.0",
	Icon = 73965937917061,
	NotifySide = "Right",
	ShowCustomCursor = true,
})
local Tabs = {
	Main = Window:AddTab("功能", "user"),
	["UI Settings"] = Window:AddTab("UI设置", "settings"),
}
------基础设置------
_G.Quantity = 0
_G.Wait_time = 2
_G.excludeMode = false
_G.ServerCaton = false
------初始化-------
for _, ProximityPrompt in ipairs(workspace:GetDescendants()) do
    if ProximityPrompt:IsA("ProximityPrompt") then
        ProximityPrompt.HoldDuration = 0
    end
end
------必备函数------
local Take = workspace.Map.Buildings.RoastMeat.Structure.Take:FindFirstChild("ProximityPrompt") --食材
local Cook = workspace.Map.Buildings.RoastMeat.Interacts.Cook:FindFirstChild("ProximityPrompt") --烹饪
local Store = workspace.Map.Buildings.RoastMeat.Interacts.Store:FindFirstChild("ProximityPrompt") --存储
local LocalPlayer = game.Players.LocalPlayer
local function fireproximitypromptfrequency(path)
    for i = 1, _G.Quantity do
        fireproximityprompt(path)
		_G.Takethecount:SetText("已经递归:"..i)
    end
end
local function Toolequip(Name)
    for _, Tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
        if Tool:IsA("Tool") and Tool.Name == Name then
            Tool.Parent = LocalPlayer.character
        end
    end
end
local function Auto()
    if _G.ServerCaton then
		Library:Notify("运行卡服功能", 5)
        fireproximitypromptfrequency(Take)
        wait(_G.Wait_time)
        Toolequip("生肉")
		Library:Notify("请手动重置人物达到卡服最后目的", 20)
        else
		Library:Notify("第一步:拿取生肉并装备", 5)
        fireproximitypromptfrequency(Take)
        wait(_G.Wait_time)
        Toolequip("生肉")
        wait(_G.Wait_time)
		Library:Notify("第二步:烹饪生肉并装备熟肉", 5)
        fireproximitypromptfrequency(Cook)
        wait(_G.Wait_time)
        Toolequip("熟肉")
        wait(_G.Wait_time)
		Library:Notify("最后一步:出售熟肉", 5)
        fireproximitypromptfrequency(Store)
		Library:Notify("已经完成所有操作", 5)
    end
end

------UI------
local LeftGroupBox = Tabs.Main:AddLeftGroupbox("功能设置")
LeftGroupBox:AddInput("MyTextbox", {
	Default = "0",
	Numeric = true,
	Finished = false,
	ClearTextOnFocus = true,
	Text = "生肉拿取数量(递归目标)",
	Tooltip = "人物需要在烤肉店箱子旁边",
	Placeholder = "请设置拿取数量",
	Callback = function(Value)
		_G.Quantity = Value
	end,
})
LeftGroupBox:AddInput("MyTextbox", {
	Default = "2",
	Numeric = true,
	Finished = false,
	ClearTextOnFocus = true,
	Text = "等待时长",
	Tooltip = "最好别动",
	Placeholder = "请设置等待时间",
	Callback = function(Value)
        _G.Wait_time = Value
	end,
})
LeftGroupBox:AddToggle("MyToggle", {
	Text = "排除",
	Tooltip = "开启后排除无关的ProximityPrompt",
	DisabledTooltip = "无法使用",
	Default = false,
	Disabled = false,
	Visible = true,
	Risky = false,
	Callback = function(Value)
        _G.excludeMode = not Value
        for _, ProximityPrompt in ipairs(workspace:GetDescendants()) do
            if ProximityPrompt:IsA("ProximityPrompt") then
                if ProximityPrompt == Take or ProximityPrompt == Cook or ProximityPrompt == Store then
                    else
                    ProximityPrompt.Enabled = _G.excludeMode
                end
            end
        end
	end,
})
LeftGroupBox:AddToggle("MyToggle", {
	Text = "卡服",
	Tooltip = "开启后在下次使用半自动刷钱自动切换卡服设置",
	DisabledTooltip = "无法使用",
	Default = false,
	Disabled = false,
	Visible = true,
	Risky = false,
	Callback = function(Value)
		_G.ServerCaton = Value
	end,
})
LeftGroupBox:AddButton({
	Text = "半自动刷钱",
	Func = function()
        Auto()
	end,
	DoubleClick = false,
	Tooltip = "确保人物在烤肉店内",
	DisabledTooltip = "无法使用",
	Disabled = false,
	Visible = true,
})
local DropdownGroupBox = Tabs.Main:AddRightGroupbox("配置信息")
_G.QuantityLabel = DropdownGroupBox:AddLabel("递归目标:".._G.Quantity)
_G.Wait_timeLabel = DropdownGroupBox:AddLabel("等待时长:".._G.Wait_time)
_G.excludeModeLabel = DropdownGroupBox:AddLabel("排除状态:"..tostring(not _G.excludeMode))
_G.ServerCatonLabel = DropdownGroupBox:AddLabel("卡服状态:"..tostring(_G.ServerCaton))
_G.Takethecount = DropdownGroupBox:AddLabel("已经递归:未知")
--UI设置(无视即可)
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu")

MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "打开按键绑定菜单",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})
MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "自定义光标",
	Default = true,
	Callback = function(Value)
		Library.ShowCustomCursor = Value
	end,
})
MenuGroup:AddDropdown("NotificationSide", {
	Values = { "左边", "右边" },
	Default = "右边",

	Text = "通知位置",

	Callback = function(Value)
		Library:SetNotifySide(Value)
	end,
})
MenuGroup:AddDropdown("DPIDropdown", {
	Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
	Default = "100%",

	Text = "DPI 比例",

	Callback = function(Value)
		Value = Value:gsub("%%", "")
		local DPI = tonumber(Value)

		Library:SetDPIScale(DPI)
	end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("菜单显示绑定")
	:AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("关闭UI", function()
	Library:Unload()
end)
Library.ToggleKeybind = Options.MenuKeybind


ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:BuildConfigSection(Tabs["UI Settings"])
SaveManager:LoadAutoloadConfig()

while true do
	_G.QuantityLabel:SetText("递归目标:".._G.Quantity)
	_G.Wait_timeLabel:SetText("等待时长:".._G.Wait_time)
	_G.excludeModeLabel:SetText("排除状态:"..tostring(not _G.excludeMode))
	_G.ServerCatonLabel:SetText("卡服状态:"..tostring(_G.ServerCaton))
	wait()
end
